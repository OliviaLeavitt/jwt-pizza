name: CI Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: set version
        id: set_version
        run: |
          version=$(date +'%Y%m%d.%H%M%S')
          echo "version=$version" >> "$GITHUB_OUTPUT"
          printf '{"version": "%s" }' "$version" > public/version.json

      - name: Install deps & build
        run: |
          npm ci
          npm run build
          cp dist/index.html dist/404.html

      - name: Update pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist/

      # ---- TESTS + BADGE (robust) ----
      - name: Run tests (generate coverage even if <80)
        run: |
          npx playwright install --with-deps chromium
          # allow next steps to run even if this fails (coverage gate later)
          npm run test:coverage || echo "Tests non-zero (likely <80%). Continuing."

      - name: Ensure jq and bc are available
        if: always()
        run: sudo apt-get update && sudo apt-get install -y jq bc

      - name: Update coverage badge (always run)
        if: always()
        run: |
          if [ ! -f coverage/coverage-summary.json ]; then
            echo "coverage-summary.json missing; seeding 0"
            coverage=0
          else
            coverage=$(jq '.total.lines.pct' coverage/coverage-summary.json)
          fi
          color=$(echo "$coverage < 80" | bc | awk '{if ($1) print "red"; else print "green"}')
          echo "NET_ID=${{ secrets.NET_ID }} coverage=$coverage color=$color"
          curl --fail -v \
            -H "authorization: bearer ${{ secrets.FACTORY_API_KEY }}" \
            "https://pizza-factory.cs329.click/api/badge/${{ secrets.NET_ID }}/jwtpizzacoverage?label=Coverage&value=${coverage}%25&color=${color}"

      - name: Enforce 80% coverage gate
        run: |
          coverage=$(jq '.total.lines.pct' coverage/coverage-summary.json)
          echo "Lines coverage = $coverage"
          pass=$(echo "$coverage >= 80" | bc)
          if [ "$pass" -ne 1 ]; then
            echo "Coverage below 80%"; exit 1
          fi
  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
